var search_data = {
    'index': {
        'searchIndex': ["oauth","oauth\\common","oauth\\common\\consumer","oauth\\common\\exception","oauth\\common\\http","oauth\\common\\http\\exception","oauth\\common\\service","oauth\\common\\service\\exception","oauth\\common\\storage","oauth\\common\\storage\\exception","oauth\\common\\token","oauth\\common\\token\\exception","oauth\\oauth1","oauth\\oauth1\\service","oauth\\oauth1\\token","oauth\\oauth2","oauth\\oauth2\\service","oauth\\oauth2\\token","oauth\\common\\autoloader","oauth\\common\\consumer\\credentials","oauth\\common\\exception\\exception","oauth\\common\\http\\artaxclient","oauth\\common\\http\\clientinterface","oauth\\common\\http\\exception\\tokenresponseexception","oauth\\common\\http\\uri","oauth\\common\\http\\urigenerator","oauth\\common\\http\\uriinterface","oauth\\common\\service\\exception\\invalidscopeexception","oauth\\common\\service\\exception\\missingrefreshtokenexception","oauth\\common\\service\\serviceinterface","oauth\\common\\storage\\exception\\storageexception","oauth\\common\\storage\\exception\\tokennotfoundexception","oauth\\common\\storage\\memory","oauth\\common\\storage\\phpredis","oauth\\common\\storage\\session","oauth\\common\\storage\\tokenstorageinterface","oauth\\common\\token\\abstracttoken","oauth\\common\\token\\exception\\expiredtokenexception","oauth\\common\\token\\tokeninterface","oauth\\oauth1\\service\\abstractservice","oauth\\oauth1\\token\\stdoauth1token","oauth\\oauth1\\token\\tokeninterface","oauth\\oauth2\\service\\abstractservice","oauth\\oauth2\\service\\bitly","oauth\\oauth2\\service\\github","oauth\\oauth2\\service\\google","oauth\\oauth2\\service\\microsoft","oauth\\oauth2\\service\\yammer","oauth\\oauth2\\token\\stdoauth2token","oauth\\oauth2\\token\\tokeninterface","oauth\\common\\autoloader::__construct","oauth\\common\\autoloader::load","oauth\\common\\autoloader::register","oauth\\common\\autoloader::unregister","oauth\\common\\consumer\\credentials::__construct","oauth\\common\\consumer\\credentials::getcallbackurl","oauth\\common\\consumer\\credentials::getconsumerid","oauth\\common\\consumer\\credentials::getconsumersecret","oauth\\common\\http\\artaxclient::retrieveresponse","oauth\\common\\http\\clientinterface::retrieveresponse","oauth\\common\\http\\uri::__construct","oauth\\common\\http\\uri::getscheme","oauth\\common\\http\\uri::getuserinfo","oauth\\common\\http\\uri::getrawuserinfo","oauth\\common\\http\\uri::gethost","oauth\\common\\http\\uri::getport","oauth\\common\\http\\uri::getpath","oauth\\common\\http\\uri::getquery","oauth\\common\\http\\uri::addtoquery","oauth\\common\\http\\uri::getfragment","oauth\\common\\http\\uri::getauthority","oauth\\common\\http\\uri::getrawauthority","oauth\\common\\http\\uri::getabsoluteuri","oauth\\common\\http\\uri::getrelativeuri","oauth\\common\\http\\uri::__tostring","oauth\\common\\http\\urigenerator::make","oauth\\common\\http\\uriinterface::getscheme","oauth\\common\\http\\uriinterface::gethost","oauth\\common\\http\\uriinterface::getport","oauth\\common\\http\\uriinterface::getpath","oauth\\common\\http\\uriinterface::getquery","oauth\\common\\http\\uriinterface::addtoquery","oauth\\common\\http\\uriinterface::getfragment","oauth\\common\\http\\uriinterface::getuserinfo","oauth\\common\\http\\uriinterface::getauthority","oauth\\common\\http\\uriinterface::__tostring","oauth\\common\\http\\uriinterface::getrawauthority","oauth\\common\\http\\uriinterface::getrawuserinfo","oauth\\common\\http\\uriinterface::getabsoluteuri","oauth\\common\\http\\uriinterface::getrelativeuri","oauth\\common\\service\\serviceinterface::__construct","oauth\\common\\service\\serviceinterface::requestaccesstoken","oauth\\common\\service\\serviceinterface::getauthorizationuri","oauth\\common\\service\\serviceinterface::getauthorizationendpoint","oauth\\common\\service\\serviceinterface::getaccesstokenendpoint","oauth\\common\\service\\serviceinterface::sendauthenticatedrequest","oauth\\common\\storage\\memory::retrieveaccesstoken","oauth\\common\\storage\\memory::storeaccesstoken","oauth\\common\\storage\\phpredis::__construct","oauth\\common\\storage\\phpredis::retrieveaccesstoken","oauth\\common\\storage\\phpredis::storeaccesstoken","oauth\\common\\storage\\session::__construct","oauth\\common\\storage\\session::retrieveaccesstoken","oauth\\common\\storage\\session::storeaccesstoken","oauth\\common\\storage\\session::__destruct","oauth\\common\\storage\\tokenstorageinterface::storeaccesstoken","oauth\\common\\storage\\tokenstorageinterface::retrieveaccesstoken","oauth\\common\\token\\abstracttoken::__construct","oauth\\common\\token\\abstracttoken::getaccesstoken","oauth\\common\\token\\abstracttoken::getrefreshtoken","oauth\\common\\token\\abstracttoken::getendoflife","oauth\\common\\token\\abstracttoken::setextraparams","oauth\\common\\token\\abstracttoken::getextraparams","oauth\\common\\token\\abstracttoken::setaccesstoken","oauth\\common\\token\\abstracttoken::setendoflife","oauth\\common\\token\\abstracttoken::setlifetime","oauth\\common\\token\\abstracttoken::setrefreshtoken","oauth\\common\\token\\tokeninterface::__construct","oauth\\common\\token\\tokeninterface::getaccesstoken","oauth\\common\\token\\tokeninterface::getendoflife","oauth\\common\\token\\tokeninterface::getextraparams","oauth\\common\\token\\tokeninterface::setaccesstoken","oauth\\common\\token\\tokeninterface::setendoflife","oauth\\common\\token\\tokeninterface::setlifetime","oauth\\common\\token\\tokeninterface::setextraparams","oauth\\common\\token\\tokeninterface::getrefreshtoken","oauth\\common\\token\\tokeninterface::setrefreshtoken","oauth\\oauth2\\service\\abstractservice::__construct","oauth\\oauth2\\service\\abstractservice::getauthorizationuri","oauth\\oauth2\\service\\abstractservice::requestaccesstoken","oauth\\oauth2\\service\\abstractservice::sendauthenticatedrequest","oauth\\oauth2\\service\\abstractservice::refreshaccesstoken","oauth\\oauth2\\service\\abstractservice::isvalidscope","oauth\\oauth2\\service\\bitly::getauthorizationendpoint","oauth\\oauth2\\service\\bitly::getaccesstokenendpoint","oauth\\oauth2\\service\\bitly::requestaccesstoken","oauth\\oauth2\\service\\github::getauthorizationendpoint","oauth\\oauth2\\service\\github::getaccesstokenendpoint","oauth\\oauth2\\service\\google::getauthorizationendpoint","oauth\\oauth2\\service\\google::getaccesstokenendpoint","oauth\\oauth2\\service\\microsoft::getauthorizationendpoint","oauth\\oauth2\\service\\microsoft::getaccesstokenendpoint","oauth\\oauth2\\service\\microsoft::getauthorizationmethod","oauth\\oauth2\\service\\yammer::getauthorizationendpoint","oauth\\oauth2\\service\\yammer::getaccesstokenendpoint","oauth\\oauth2\\service\\yammer::getauthorizationmethod"],
        'info': [["OAuth","","OAuth.html","","",3],["OAuth\\Common","","OAuth\/Common.html","","",3],["OAuth\\Common\\Consumer","","OAuth\/Common\/Consumer.html","","",3],["OAuth\\Common\\Exception","","OAuth\/Common\/Exception.html","","",3],["OAuth\\Common\\Http","","OAuth\/Common\/Http.html","","",3],["OAuth\\Common\\Http\\Exception","","OAuth\/Common\/Http\/Exception.html","","",3],["OAuth\\Common\\Service","","OAuth\/Common\/Service.html","","",3],["OAuth\\Common\\Service\\Exception","","OAuth\/Common\/Service\/Exception.html","","",3],["OAuth\\Common\\Storage","","OAuth\/Common\/Storage.html","","",3],["OAuth\\Common\\Storage\\Exception","","OAuth\/Common\/Storage\/Exception.html","","",3],["OAuth\\Common\\Token","","OAuth\/Common\/Token.html","","",3],["OAuth\\Common\\Token\\Exception","","OAuth\/Common\/Token\/Exception.html","","",3],["OAuth\\OAuth1","","OAuth\/OAuth1.html","","",3],["OAuth\\OAuth1\\Service","","OAuth\/OAuth1\/Service.html","","",3],["OAuth\\OAuth1\\Token","","OAuth\/OAuth1\/Token.html","","",3],["OAuth\\OAuth2","","OAuth\/OAuth2.html","","",3],["OAuth\\OAuth2\\Service","","OAuth\/OAuth2\/Service.html","","",3],["OAuth\\OAuth2\\Token","","OAuth\/OAuth2\/Token.html","","",3],["AutoLoader","OAuth\\Common","OAuth\/Common\/AutoLoader.html","","PSR-0 Autoloader",1],["Credentials","OAuth\\Common\\Consumer","OAuth\/Common\/Consumer\/Credentials.html","","Container class for the credentials of an OAuth service.",1],["Exception","OAuth\\Common\\Exception","OAuth\/Common\/Exception\/Exception.html"," < Exception","Generic library-level exception.",1],["ArtaxClient","OAuth\\Common\\Http","OAuth\/Common\/Http\/ArtaxClient.html","","Client interface for the Artax HTTP Client",1],["ClientInterface","OAuth\\Common\\Http","OAuth\/Common\/Http\/ClientInterface.html","","Any HTTP clients to be used with the library should",1],["TokenResponseException","OAuth\\Common\\Http\\Exception","OAuth\/Common\/Http\/Exception\/TokenResponseException.html"," < Exception","Exception relating to token response from service.",1],["Uri","OAuth\\Common\\Http","OAuth\/Common\/Http\/Uri.html","","Standards-compliant URI class.",1],["UriGenerator","OAuth\\Common\\Http","OAuth\/Common\/Http\/UriGenerator.html","","Generates a URI based on certain params.",1],["UriInterface","OAuth\\Common\\Http","OAuth\/Common\/Http\/UriInterface.html","","URI interface.",1],["InvalidScopeException","OAuth\\Common\\Service\\Exception","OAuth\/Common\/Service\/Exception\/InvalidScopeException.html"," < Exception","Exception thrown when a scope provided to a service",1],["MissingRefreshTokenException","OAuth\\Common\\Service\\Exception","OAuth\/Common\/Service\/Exception\/MissingRefreshTokenException.html"," < Exception","Exception thrown when service is requested to refresh",1],["ServiceInterface","OAuth\\Common\\Service","OAuth\/Common\/Service\/ServiceInterface.html","","Defines the common methods across any OAuth service,",1],["StorageException","OAuth\\Common\\Storage\\Exception","OAuth\/Common\/Storage\/Exception\/StorageException.html"," < Exception","",1],["TokenNotFoundException","OAuth\\Common\\Storage\\Exception","OAuth\/Common\/Storage\/Exception\/TokenNotFoundException.html"," < StorageException","",1],["Memory","OAuth\\Common\\Storage","OAuth\/Common\/Storage\/Memory.html","","",1],["PHPRedis","OAuth\\Common\\Storage","OAuth\/Common\/Storage\/PHPRedis.html","","",1],["Session","OAuth\\Common\\Storage","OAuth\/Common\/Storage\/Session.html","","Stores a token in a PHP session.",1],["TokenStorageInterface","OAuth\\Common\\Storage","OAuth\/Common\/Storage\/TokenStorageInterface.html","","All token storage providers must implement this interface.",1],["AbstractToken","OAuth\\Common\\Token","OAuth\/Common\/Token\/AbstractToken.html","","Base token implementation for any OAuth version.",1],["ExpiredTokenException","OAuth\\Common\\Token\\Exception","OAuth\/Common\/Token\/Exception\/ExpiredTokenException.html"," < Exception","Exception thrown when an expired token is attempted",1],["TokenInterface","OAuth\\Common\\Token","OAuth\/Common\/Token\/TokenInterface.html","","Base token interface for any OAuth version.",1],["AbstractService","OAuth\\OAuth1\\Service","OAuth\/OAuth1\/Service\/AbstractService.html","","Abstract service for OAuth1.",1],["StdOAuth1Token","OAuth\\OAuth1\\Token","OAuth\/OAuth1\/Token\/StdOAuth1Token.html"," < AbstractToken","Standard OAuth1 token implementation.",1],["TokenInterface","OAuth\\OAuth1\\Token","OAuth\/OAuth1\/Token\/TokenInterface.html","","OAuth1 specific token interface",1],["AbstractService","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/AbstractService.html","","AbstractService class for OAuth 2, implements basic",1],["Bitly","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/Bitly.html"," < AbstractService","OAuth2 service implementation for Bitly.",1],["GitHub","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/GitHub.html"," < AbstractService","OAuth2 service implementation for GitHub.",1],["Google","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/Google.html"," < AbstractService","OAuth2 service implementation for Google.",1],["Microsoft","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/Microsoft.html"," < AbstractService","OAuth2 service implementation for Microsoft.",1],["Yammer","OAuth\\OAuth2\\Service","OAuth\/OAuth2\/Service\/Yammer.html"," < AbstractService","OAuth2 service implementation for Yammer.",1],["StdOAuth2Token","OAuth\\OAuth2\\Token","OAuth\/OAuth2\/Token\/StdOAuth2Token.html"," < AbstractToken","Standard OAuth2 token implementation.",1],["TokenInterface","OAuth\\OAuth2\\Token","OAuth\/OAuth2\/Token\/TokenInterface.html","","OAuth2 specific TokenInterface",1],["AutoLoader::__construct","OAuth\\Common\\AutoLoader","OAuth\/Common\/AutoLoader.html#method___construct","(string $namespace, string $path)","Build the instance of the autoloader",2],["AutoLoader::load","OAuth\\Common\\AutoLoader","OAuth\/Common\/AutoLoader.html#method_load","(string $class)","Try to load a class",2],["AutoLoader::register","OAuth\\Common\\AutoLoader","OAuth\/Common\/AutoLoader.html#method_register","()","Register the autoloader to PHP",2],["AutoLoader::unregister","OAuth\\Common\\AutoLoader","OAuth\/Common\/AutoLoader.html#method_unregister","()","Unregister the autoloader to PHP",2],["Credentials::__construct","OAuth\\Common\\Consumer\\Credentials","OAuth\/Common\/Consumer\/Credentials.html#method___construct","(string $consumerId, string $consumerSecret, string $callbackUrl)","",2],["Credentials::getCallbackUrl","OAuth\\Common\\Consumer\\Credentials","OAuth\/Common\/Consumer\/Credentials.html#method_getCallbackUrl","()","",2],["Credentials::getConsumerId","OAuth\\Common\\Consumer\\Credentials","OAuth\/Common\/Consumer\/Credentials.html#method_getConsumerId","()","",2],["Credentials::getConsumerSecret","OAuth\\Common\\Consumer\\Credentials","OAuth\/Common\/Consumer\/Credentials.html#method_getConsumerSecret","()","",2],["ArtaxClient::retrieveResponse","OAuth\\Common\\Http\\ArtaxClient","OAuth\/Common\/Http\/ArtaxClient.html#method_retrieveResponse","(<a href=\"OAuth\/Common\/Http\/UriInterface.html\"><abbr title=\"OAuth\\Common\\Http\\UriInterface\">UriInterface<\/abbr><\/a> $endpoint, array $params, array $extraHeaders = array(), string $method = &#039;POST&#039;)","Any implementing HTTP providers should send a POST",2],["ClientInterface::retrieveResponse","OAuth\\Common\\Http\\ClientInterface","OAuth\/Common\/Http\/ClientInterface.html#method_retrieveResponse","(<a href=\"OAuth\/Common\/Http\/UriInterface.html\"><abbr title=\"OAuth\\Common\\Http\\UriInterface\">UriInterface<\/abbr><\/a> $endpoint, array $params, array $extraHeaders = array(), $method = &#039;POST&#039;)","Any implementing HTTP providers should send a POST",2],["Uri::__construct","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method___construct","(string $uri)","",2],["Uri::getScheme","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getScheme","()","",2],["Uri::getUserInfo","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getUserInfo","()","Should return URI user info, masking protected user",2],["Uri::getRawUserInfo","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getRawUserInfo","()","Should return the URI user info without masking protected",2],["Uri::getHost","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getHost","()","",2],["Uri::getPort","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getPort","()","",2],["Uri::getPath","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getPath","()","",2],["Uri::getQuery","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getQuery","()","",2],["Uri::addToQuery","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_addToQuery","(string $var, string $val)","We need the ability to manipulate the uri from the",2],["Uri::getFragment","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getFragment","()","",2],["Uri::getAuthority","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getAuthority","()","Should return the URI Authority, masking protected",2],["Uri::getRawAuthority","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getRawAuthority","()","Should return the URI Authority without masking protected",2],["Uri::getAbsoluteUri","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getAbsoluteUri","()","Build the full URI based on all the properties",2],["Uri::getRelativeUri","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method_getRelativeUri","()","Build the relative URI based on all the properties",2],["Uri::__toString","OAuth\\Common\\Http\\Uri","OAuth\/Common\/Http\/Uri.html#method___toString","()","Should return the URI string, masking protected user",2],["UriGenerator::make","OAuth\\Common\\Http\\UriGenerator","OAuth\/Common\/Http\/UriGenerator.html#method_make","(array $_server, $includeQueryString = true)","Generates a StdUri from a superglobal $_SERVER array",2],["UriInterface::getScheme","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getScheme","()","",2],["UriInterface::getHost","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getHost","()","",2],["UriInterface::getPort","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getPort","()","",2],["UriInterface::getPath","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getPath","()","",2],["UriInterface::getQuery","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getQuery","()","",2],["UriInterface::addToQuery","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_addToQuery","($var, $val)","We need the ability to manipulate the uri from the",2],["UriInterface::getFragment","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getFragment","()","",2],["UriInterface::getUserInfo","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getUserInfo","()","Should return URI user info, masking protected user",2],["UriInterface::getAuthority","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getAuthority","()","Should return the URI Authority, masking protected",2],["UriInterface::__toString","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method___toString","()","Should return the URI string, masking protected user",2],["UriInterface::getRawAuthority","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getRawAuthority","()","Should return the URI Authority without masking protected",2],["UriInterface::getRawUserInfo","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getRawUserInfo","()","Should return the URI user info without masking protected",2],["UriInterface::getAbsoluteUri","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getAbsoluteUri","()","Build the full URI based on all the properties",2],["UriInterface::getRelativeUri","OAuth\\Common\\Http\\UriInterface","OAuth\/Common\/Http\/UriInterface.html#method_getRelativeUri","()","Build the relative URI based on all the properties",2],["ServiceInterface::__construct","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method___construct","(<a href=\"OAuth\/Common\/Consumer\/Credentials.html\"><abbr title=\"OAuth\\Common\\Consumer\\Credentials\">Credentials<\/abbr><\/a> $credentials, <a href=\"OAuth\/Common\/Http\/ClientInterface.html\"><abbr title=\"OAuth\\Common\\Http\\ClientInterface\">ClientInterface<\/abbr><\/a> $httpClient, <a href=\"OAuth\/Common\/Storage\/TokenStorageInterface.html\"><abbr title=\"OAuth\\Common\\Storage\\TokenStorageInterface\">TokenStorageInterface<\/abbr><\/a> $storage, array $scopes = array())","",2],["ServiceInterface::requestAccessToken","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method_requestAccessToken","($code)","Retrieves and stores\/returns the OAuth2 access token",2],["ServiceInterface::getAuthorizationUri","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method_getAuthorizationUri","(array $additionalParameters = array())","Returns the url to redirect to for authorization purposes.",2],["ServiceInterface::getAuthorizationEndpoint","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method_getAuthorizationEndpoint","()","",2],["ServiceInterface::getAccessTokenEndpoint","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method_getAccessTokenEndpoint","()","",2],["ServiceInterface::sendAuthenticatedRequest","OAuth\\Common\\Service\\ServiceInterface","OAuth\/Common\/Service\/ServiceInterface.html#method_sendAuthenticatedRequest","(<a href=\"OAuth\/Common\/Http\/UriInterface.html\"><abbr title=\"OAuth\\Common\\Http\\UriInterface\">UriInterface<\/abbr><\/a> $uri, array $bodyParams, $method = &#039;POST&#039;, $extraHeaders = array())","Sends an authenticated request to the given endpoint",2],["Memory::retrieveAccessToken","OAuth\\Common\\Storage\\Memory","OAuth\/Common\/Storage\/Memory.html#method_retrieveAccessToken","()","",2],["Memory::storeAccessToken","OAuth\\Common\\Storage\\Memory","OAuth\/Common\/Storage\/Memory.html#method_storeAccessToken","(<a href=\"OAuth\/Common\/Token\/TokenInterface.html\"><abbr title=\"OAuth\\Common\\Token\\TokenInterface\">TokenInterface<\/abbr><\/a> $token)","",2],["PHPRedis::__construct","OAuth\\Common\\Storage\\PHPRedis","OAuth\/Common\/Storage\/PHPRedis.html#method___construct","(<abbr title=\"Redis\">Redis<\/abbr> $redis, string $key)","",2],["PHPRedis::retrieveAccessToken","OAuth\\Common\\Storage\\PHPRedis","OAuth\/Common\/Storage\/PHPRedis.html#method_retrieveAccessToken","()","",2],["PHPRedis::storeAccessToken","OAuth\\Common\\Storage\\PHPRedis","OAuth\/Common\/Storage\/PHPRedis.html#method_storeAccessToken","(<a href=\"OAuth\/Common\/Token\/TokenInterface.html\"><abbr title=\"OAuth\\Common\\Token\\TokenInterface\">TokenInterface<\/abbr><\/a> $token)","",2],["Session::__construct","OAuth\\Common\\Storage\\Session","OAuth\/Common\/Storage\/Session.html#method___construct","(bool $startSession = true, string $sessionVariableName = &#039;lusitanian_oauth_token&#039;)","",2],["Session::retrieveAccessToken","OAuth\\Common\\Storage\\Session","OAuth\/Common\/Storage\/Session.html#method_retrieveAccessToken","()","",2],["Session::storeAccessToken","OAuth\\Common\\Storage\\Session","OAuth\/Common\/Storage\/Session.html#method_storeAccessToken","(<a href=\"OAuth\/Common\/Token\/TokenInterface.html\"><abbr title=\"OAuth\\Common\\Token\\TokenInterface\">TokenInterface<\/abbr><\/a> $token)","",2],["Session::__destruct","OAuth\\Common\\Storage\\Session","OAuth\/Common\/Storage\/Session.html#method___destruct","()","",2],["TokenStorageInterface::storeAccessToken","OAuth\\Common\\Storage\\TokenStorageInterface","OAuth\/Common\/Storage\/TokenStorageInterface.html#method_storeAccessToken","(<a href=\"OAuth\/Common\/Token\/TokenInterface.html\"><abbr title=\"OAuth\\Common\\Token\\TokenInterface\">TokenInterface<\/abbr><\/a> $token)","",2],["TokenStorageInterface::retrieveAccessToken","OAuth\\Common\\Storage\\TokenStorageInterface","OAuth\/Common\/Storage\/TokenStorageInterface.html#method_retrieveAccessToken","()","",2],["AbstractToken::__construct","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method___construct","(string $accessToken = null, string $refreshToken = null, int $lifetime = null, array $extraParams = array())","",2],["AbstractToken::getAccessToken","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_getAccessToken","()","",2],["AbstractToken::getRefreshToken","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_getRefreshToken","()","",2],["AbstractToken::getEndOfLife","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_getEndOfLife","()","",2],["AbstractToken::setExtraParams","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_setExtraParams","(array $extraParams)","",2],["AbstractToken::getExtraParams","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_getExtraParams","()","",2],["AbstractToken::setAccessToken","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_setAccessToken","(string $accessToken)","",2],["AbstractToken::setEndOfLife","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_setEndOfLife","(int $endOfLife)","",2],["AbstractToken::setLifetime","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_setLifetime","(<abbr title=\"OAuth\\Common\\Token\\$lifetime\">$lifetime<\/abbr> $lifetime)","",2],["AbstractToken::setRefreshToken","OAuth\\Common\\Token\\AbstractToken","OAuth\/Common\/Token\/AbstractToken.html#method_setRefreshToken","(string $refreshToken)","",2],["TokenInterface::__construct","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method___construct","($accessToken = null, $refreshToken = null, $lifetime = null, $extraParams = array())","",2],["TokenInterface::getAccessToken","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_getAccessToken","()","",2],["TokenInterface::getEndOfLife","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_getEndOfLife","()","",2],["TokenInterface::getExtraParams","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_getExtraParams","()","",2],["TokenInterface::setAccessToken","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_setAccessToken","($accessToken)","",2],["TokenInterface::setEndOfLife","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_setEndOfLife","($endOfLife)","",2],["TokenInterface::setLifetime","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_setLifetime","($lifetime)","",2],["TokenInterface::setExtraParams","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_setExtraParams","(array $extraParams)","",2],["TokenInterface::getRefreshToken","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_getRefreshToken","()","",2],["TokenInterface::setRefreshToken","OAuth\\Common\\Token\\TokenInterface","OAuth\/Common\/Token\/TokenInterface.html#method_setRefreshToken","($refreshToken)","",2],["AbstractService::__construct","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method___construct","(<a href=\"OAuth\/Common\/Consumer\/Credentials.html\"><abbr title=\"OAuth\\Common\\Consumer\\Credentials\">Credentials<\/abbr><\/a> $credentials, <a href=\"OAuth\/Common\/Http\/ClientInterface.html\"><abbr title=\"OAuth\\Common\\Http\\ClientInterface\">ClientInterface<\/abbr><\/a> $httpClient, <a href=\"OAuth\/Common\/Storage\/TokenStorageInterface.html\"><abbr title=\"OAuth\\Common\\Storage\\TokenStorageInterface\">TokenStorageInterface<\/abbr><\/a> $storage, array $scopes = array())","",2],["AbstractService::getAuthorizationUri","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method_getAuthorizationUri","(array $additionalParameters = array())","Returns the url to redirect to for authorization purposes.",2],["AbstractService::requestAccessToken","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method_requestAccessToken","(string $code)","Retrieves and stores the OAuth2 access token after",2],["AbstractService::sendAuthenticatedRequest","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method_sendAuthenticatedRequest","(<a href=\"OAuth\/Common\/Http\/UriInterface.html\"><abbr title=\"OAuth\\Common\\Http\\UriInterface\">UriInterface<\/abbr><\/a> $uri, array $bodyParams, string $method = &#039;POST&#039;, array $extraHeaders = array())","Sends an authenticated request to the given endpoint",2],["AbstractService::refreshAccessToken","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method_refreshAccessToken","(<a href=\"OAuth\/Common\/Token\/TokenInterface.html\"><abbr title=\"OAuth\\Common\\Token\\TokenInterface\">TokenInterface<\/abbr><\/a> $token)","Refreshes an OAuth2 access token.",2],["AbstractService::isValidScope","OAuth\\OAuth2\\Service\\AbstractService","OAuth\/OAuth2\/Service\/AbstractService.html#method_isValidScope","(<abbr title=\"OAuth\\OAuth2\\Service\\$scope\">$scope<\/abbr> $scope)","Return whether or not the passed scope value is valid.",2],["Bitly::getAuthorizationEndpoint","OAuth\\OAuth2\\Service\\Bitly","OAuth\/OAuth2\/Service\/Bitly.html#method_getAuthorizationEndpoint","()","",2],["Bitly::getAccessTokenEndpoint","OAuth\\OAuth2\\Service\\Bitly","OAuth\/OAuth2\/Service\/Bitly.html#method_getAccessTokenEndpoint","()","",2],["Bitly::requestAccessToken","OAuth\\OAuth2\\Service\\Bitly","OAuth\/OAuth2\/Service\/Bitly.html#method_requestAccessToken","(string $code)","Retrieves and stores the OAuth2 access token after",2],["GitHub::getAuthorizationEndpoint","OAuth\\OAuth2\\Service\\GitHub","OAuth\/OAuth2\/Service\/GitHub.html#method_getAuthorizationEndpoint","()","",2],["GitHub::getAccessTokenEndpoint","OAuth\\OAuth2\\Service\\GitHub","OAuth\/OAuth2\/Service\/GitHub.html#method_getAccessTokenEndpoint","()","",2],["Google::getAuthorizationEndpoint","OAuth\\OAuth2\\Service\\Google","OAuth\/OAuth2\/Service\/Google.html#method_getAuthorizationEndpoint","()","",2],["Google::getAccessTokenEndpoint","OAuth\\OAuth2\\Service\\Google","OAuth\/OAuth2\/Service\/Google.html#method_getAccessTokenEndpoint","()","",2],["Microsoft::getAuthorizationEndpoint","OAuth\\OAuth2\\Service\\Microsoft","OAuth\/OAuth2\/Service\/Microsoft.html#method_getAuthorizationEndpoint","()","",2],["Microsoft::getAccessTokenEndpoint","OAuth\\OAuth2\\Service\\Microsoft","OAuth\/OAuth2\/Service\/Microsoft.html#method_getAccessTokenEndpoint","()","",2],["Microsoft::getAuthorizationMethod","OAuth\\OAuth2\\Service\\Microsoft","OAuth\/OAuth2\/Service\/Microsoft.html#method_getAuthorizationMethod","()","",2],["Yammer::getAuthorizationEndpoint","OAuth\\OAuth2\\Service\\Yammer","OAuth\/OAuth2\/Service\/Yammer.html#method_getAuthorizationEndpoint","()","",2],["Yammer::getAccessTokenEndpoint","OAuth\\OAuth2\\Service\\Yammer","OAuth\/OAuth2\/Service\/Yammer.html#method_getAccessTokenEndpoint","()","",2],["Yammer::getAuthorizationMethod","OAuth\\OAuth2\\Service\\Yammer","OAuth\/OAuth2\/Service\/Yammer.html#method_getAuthorizationMethod","()","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']